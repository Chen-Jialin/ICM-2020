help.search(min)
help.search('min')
help.search('Min')
help.search(M)
help.search(distribution)
help.search('distribution'')
help.search('distribution')
help.search('distribution')
?barplot
??barplot
??plot
help(dpois)
help.search('test')
example("mean")
example("curve")
var.n = function(x){}
var.n()
var.n = function(x){
v = var(x)
n = NROW(x)
v * (n - 1) / n
}
NROW(c(1,2,3,4))
f = function(x,a=1,b=1)
x^(a - 1) * (1 - x)^(b-1)
x = seq(0,1,.2)
f(x,a=1,b=2)
f(x,a=2,b=2)
integrate(f,lower = 0,upper = 1,a=2,b=2)
beta(2,2)
?Special
curve(x*(1-x),from = 0,to = 1,ylab = 'f(x)')
probs = c(.45,.05,.01,.48,.70,.50,.07,.25,.49)
P = matrix(probs,nrow = 3,ncol = 3)
P
rownames(P) <- colnames(P) <- c("lower", "middle", "upper")
P
rowsum(P)
rowSum(P)
rowSusm(P)
rowSums(P)
apply(P,MARGIN = 1,FUN = sum())
apply(P,MARGIN = 1,FUN = sum
a
apply(P,MARGIN = 1,FUN = sum)
P2 = P %*% P
P2
P2[1,3]
P2[1,]
P2[1,:]
P2[1,]
P4 = P2 %*% P2
P8 = P4 %*% P4
P8
solve(P)
data()
USArrests
head(USArrests)
NROW(USArrests)
dim(USArrests)
names(USArrests)
str(USArrests)
arrests = as.matrix(USArrests)
arrests
str(arrests)
rownames(arrests)
colnames(arrests)
dimnames(arrests)
any(is.na(USArrests))
summary(USArrests)
USArrests['California','Murder']
USArrests['California']
USArrests['California',]
USArrests$Assault
hist(arrests$Assult)
hist(USArrests$Assault)
library(MASS)
truehist(USArrests$Assault)
hist(USArrests$Assault,prob = TRUE,breaks = 'scott')
attach(USArrests)
murder.pct = 100 * Murder / (Murder + Assault + Rape)
head(murder.pct)
plot(UrbanPop,Murder)
pairs(USArrests)
cor(UrbanPop,Murder)
cor(USArrests)
getwd()
data()
y1 = c(22,26)
y2 = c(28,24,29)
y3 = c(29,32,28)
y4 = c(23,24)
y = c(y1,y2,y3,y4)
rep('A',2)
type(1)
1
class(1)
class(rep('A',2))
y
Model = c(rep('A',2),rep('B',3),rep('C',3),rep('D',2))
Model
mileages = data.frame(y,Model)
str(mileages)
mileages
pidigits = read.table("http://www.itl.nist.gov/div898/strd/univ/data/PiDigits.dat",skip = 60)
head(pidigits)
table(pidigits)
prop = table(pidigits) / 5000
prop
sqrt(.1 * .9 / 5000)
se.hat = sqrt(prop * (1-prop) / 5000)
round(rbind(prop,se.hat,prop-2*se,prop+2*se.hat),4)
round(rbind(prop,se.hat,prop-2*se.hat,prop+2*se.hat),4)
barplot(prop,xlab = 'digit',ylab = 'proportion')
abline(h=.1)
library()
install.packages('bootstrap')
install.packages('bootstrap')
data(package = 'bootstrap')
library(bootstrap)
library(help = "bootstrap")
help(package = "bootstrap")
law
mean(law)
libra(bootstrap())
libra(bootstrap
)
library(bootstrap)
law
mean(law)
mean(matrix(law))
class(law)
str(law)
mean(law$LSAT)
cor(law$LSTA,law$GPA)
cor(law$LSAT,law$GPA)
ls
ls()
objects()
rm(x)
x
rm(v)
v
rm(list = ls())
pi
round(pi,5)
options()
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
help(cumsum)
cumsum(c(1,2,3,4))
c(1:12)
c(0:12)
combn(2,1)
combn(3,1)
combn(1,4)
chooes(4,1)
choose(4,1)
choose(4,2)
n = 12
X = c(0:n)
P = choose(n,X)
n = 12
X = c(0:n)
P = choose(n,X)
P
n = 12
k = c(0:n)
P = choose(n,k) * (1 / 6)^k * (1 - 1 / 6)^(n - k)
P
F = cumsum(P)
F
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
pbinom(m,p)
pbinom(n,p)
pbinom(n = n,prob = p)
pbinom(n,prob = p)
help("pbinom")
example("pbinom")
pbinom(k,n,p)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
pbinom(n,prob = p)
pbinom(k,n,p)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
pbinom(k,n,p)
k = c(0:12)
k
F = 1-pbinom(7,n,p)
table(F)
F = pbinom(k,n,p)
table(F)
F = pbinom(k,n,p)
cbind(k,F)
F = pbinom(k,n,p)
F = cbind(k,F)
colnames(F) = c('k','F(X=k)')
F = pbinom(k,n,p)
F = cbind(k,F)
colnames(F) = c('k','F(X=k)')
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ',1-pbinom(7,n,p))
F = 1-pbinom(7,n,p)
print('F(X>7) = ')
1-pbinom(7,n,p)
option(digits=8)
options(digits=8)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ')
1-pbinom(7,n,p)
options(digits=16)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ')
1-pbinom(7,n,p)
options(digits=16)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ')
1-pbinom(7,n,p)
options(digits=12)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ')
1-pbinom(7,n,p)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ',end = '')
1-pbinom(7,n,p)
options(digits = 12)
n = 12
p = 1/6
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ',end = '')
1-pbinom(7,n,p)
options(digits = 12)
n = 12
p = 1/3
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ',end = '')
1-pbinom(7,n,p)
options(digits = 8)
n = 12
p = 1/3
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
print('F(X>7) = ',end = '')
1-pbinom(7,n,p)
options(digits = 8)
n = 12
p = 1/3
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
F_7upper = 1-pbinom(7,n,p)
colnames(F_7upper) = 'F(X>7)'
options(digits = 8)
n = 12
p = 1/3
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
F_7upper = 1-pbinom(7,n,p)
colnames(F_7upper) = c('F(X>7)')
options(digits = 8)
n = 12
p = 1/3
k = c(0:n)
P = choose(n,k) * p^k * (1 - p)^(n - k)
P
F = cumsum(P)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = pbinom(k,n,p)
F_k = cbind(k,F)
colnames(F_k) = c('k','F(X=k)')
F_k
F = 1-pbinom(7,n,p)
1-pbinom(7,n,p)
x = matrix(rnorm(20),10,2)
x = matrix(rnorm(20),10,2)
x
summary(x)
rm(list = ls())
x = c(109,66,22,3,1)
x = c(109,66,22,3,1)
y = rpois(200,lambda = .61)
x
y
mean > x <- c(10,20,30)
mean> x <- c(10,20,30)
qnorm(0.5)
mean(x <- c(10,20,30))
sim.post = rgamma(1000,shape = 331.6,rate = 270.3)
hist(sim.post,freq =FALSE,main ='',xlab = 'Lambda')
curve(dgamma(x,shape = 331.6,rate = 270.3),add = TRUE)
quantile(sim.post,c(0.05,0.5,0.95))
c(1 2)
y = c(0,2,0,4,1,0,2,0,1,0,0,1,1,3,1,0,0,0,1,
6,0,9,0,4,1,9,1,0,3,4,5,5,1,0,2,4,0,4,
0,3,2,1,0,1,3,7,0,3,1,2,14,4,0,1,6,1,10,
1,2,0,1,0,4,5,0,7,3,1,2,1,2,1,2,2,4,3,
3,1,1,2,1,2,7,0,3,1,2,2,2,2,0,3,4,1,1,
0,0,1,1,1,11,2,2,1,3,1,0,1,2,1,1,1,0,0,
2,0,10,1,2,2,1,1,3,1,1,0,0,1,0,1,0,1,1,
0,1,0,0,0,2,1,4,5,5,0,0,0,0,2,0,8,5,2,
11,8,0,7,1,3,1)
n = length(y)
n
s = sum(y)
s
help(rbeta)
rbeta(202,432)
rbeta(1,202,432)
y = c(0,2,0,4,1,0,2,0,1,0,0,1,1,3,1,0,0,0,1,
6,0,9,0,4,1,9,1,0,3,4,5,5,1,0,2,4,0,4,
0,3,2,1,0,1,3,7,0,3,1,2,14,4,0,1,6,1,10,
1,2,0,1,0,4,5,0,7,3,1,2,1,2,1,2,2,4,3,
3,1,1,2,1,2,7,0,3,1,2,2,2,2,0,3,4,1,1,
0,0,1,1,1,11,2,2,1,3,1,0,1,2,1,1,1,0,0,
2,0,10,1,2,2,1,1,3,1,1,0,0,1,0,1,0,1,1,
0,1,0,0,0,2,1,4,5,5,0,0,0,0,2,0,8,5,2,
11,8,0,7,1,3,1)
n = length(y)
n
s = sum(y)
s
sim.p = rbeta(1000,202,433)
??  geometric
help("rgeom")
p = rbeta(1,202,433)
ys = rbeta(1000,p)
p = rbeta(1,202,433)
ys = rgeom(1000,p)
head(ys)
tail(ys)
mean(y)
mean(ys)
hist(ys)
sim.post = rbeta(1,202,433)
hist(sim.post)
sim.post = rbeta(1000,202,433)
hist(sim.post)
help("var")
mean(sim.post)
sd(sim.post)
quantile(sim.post,c(0.025,0.975))
qbeta(c(0.025,0.975))
sim.post = rbeta(1000,203,433)
hist(sim.post)
mean(sim.post)
sd(sim.post)
quantile(sim.post,c(0.025,0.975))
qbeta(c(0.025,0.975),203,433)
passingevents = read.csv(passingevents)
passingevents = read.csv(passingevents.csv)
dir()
setwd("D:/OneDrive - shanghaitech.edu.cn/Study/Self-Study/MathematicalModeling/2020MCM&ICM/Modeling/2020_Problem_D_DATA")
passingevents = read.csv(passingevents)
passingevents = read.csv(passingevents.csv)
dir()
passingevents = read.csv("passingevents.csv")
head(passingevents)
huskies = passingevents[which(passingevents$TeamID == 'Huskies'),]
head(huskies)
help("unique")
huskiesmember = unique(huskies)
huskiesmember
huskiesmember = unique(huskies$OriginPlayerID)
huskiesmember
data.frame(huskiesmember,seq(1:30))
huskiesnumber = data.frame(huskiesmember,seq(1:30))
huskiesnumber
fullevents = read.csv('fullevents.csv')
head(fullevents)
View(huskies)
View(huskies)
passing_huskies = huskies
remove(huskies)
View(passing_huskies)
passing_rivals = passingevents[which(passingevents$TeamID != 'Huskies'),]
head(passing_rivals)
average_x_huskies = average((passing_huskies$EventOrigin_x + passing_huskies$EventDestination_x) / 2)
average_x_huskies = mean((passing_huskies$EventOrigin_x + passing_huskies$EventDestination_x) / 2)
average_x_huskies
average_y_huskies = mean((passing_huskies$EventOrigin_y + passing_huskies$EventDestination_y) / 2)
average_y_huskies
average_x_other = mean((passing_other$EventOrigin_x + passing_other$EventDestination_x) / 2)
average_x_rivals = mean((passing_rivals$EventOrigin_x + passing_rivals$EventDestination_x) / 2)
average_y_rivals = mean((passing_rivals$EventOrigin_y + passing_rivals$EventDestination_y) / 2)
save.image("D:/OneDrive - shanghaitech.edu.cn/Study/Self-Study/MathematicalModeling/2020MCM&ICM/Modeling/2020_Problem_D_DATA/tmp17-11.RData")
matches = unique(passingevents$MatchID)
matches
